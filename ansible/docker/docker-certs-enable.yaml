---
- name: Docker Certs enable
  hosts: "{{ my_hosts | d([]) }}"
  become: true
  gather_facts: true

  vars:
    certs_path: /root/docker-certs

  tasks:
    - name: Check if docker certs are existing
      ansible.builtin.stat:
        path: "{{ certs_path }}"
      register: certs_dir

    - name: Fail if docker certs are not existing
      ansible.builtin.fail:
        msg: "Docker certificates are not existing in {{ certs_path }}."
      when: not certs_dir.stat.exists

    - name: Source upstream-provided docker daemon systemd unit file
      ansible.builtin.slurp:
        src: /lib/systemd/system/docker.service
      register: docker_systemd_docker_service_orig

    - name: Deploy TLS-enabled docker daemon systemd unit file
      ansible.builtin.copy:
        content: "{{ _docker_systemd_docker_service_with_tls_content }}"
        dest: /etc/systemd/system/docker.service
        mode: '0644'
        owner: root
        group: root
      notify: Restart docker daemon
      register: docker_systemd_docker_service
      vars:  # noqa: jinja[spacing]
        _docker_systemd_docker_service_with_tls_content: |
          {{ docker_systemd_docker_service_orig['content'] | b64decode | regex_replace(_regex_match, _regex_subst) }}
        _regex_match: '(\s+)-H\s+fd://(\s*)'
        _regex_subst: >-
          {{- '\1' -}}
          -H fd://
          {%- if ansible_facts['default_ipv4']['address'] | d() is ansible.utils.ip_address %}
          -H tcp://{{ ansible_facts['default_ipv4']['address'] }}:2376
          {%- endif %}
          --tlsverify
          --tlscacert=/root/docker-certs/ca.pem
          --tlscert=/root/docker-certs/server-cert.pem
          --tlskey=/root/docker-certs/server-key.pem
          {{- '\2' -}}

    - name: Reload systemd daemon  # noqa: no-handler
      ansible.builtin.systemd_service:
        daemon_reload: true
      when:
        - docker_systemd_docker_service['changed'] | d(false)

  handlers:
    - name: Restart docker daemon
      ansible.builtin.systemd_service:
        name: docker
        state: restarted
        enabled: true
